name: MyMath - Release NuGet Package and Create GitHub Release

env:
  DOTNET_VERSION: '8.0.x'
  # Asegúrate que este PROJECT_NAME coincida con el <PackageId> en tu .csproj
  PROJECT_NAME: MyMath.Lib 
  PROJECT_PATH: MyMath/Math.Lib/Math.Lib.csproj
  TEST_PROJECT_PATH: MyMath/Math.Tests/Math.Tests.csproj
  PACKAGE_OUTPUT_DIRECTORY: out

on:
  push:
    branches:
      - main # O la rama principal que uses para disparar releases
  workflow_dispatch:
    inputs:
      matricula_version:
        description: 'Tu código de matrícula para usar como versión del paquete (ej: M12345678)'
        required: true
        default: 'M00000000' # Un valor por defecto como placeholder

jobs:
  build-test-publish-release:
    name: Build, Test, Publish MyMath Package and Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write 
      packages: write 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    # Snyk (Descomenta si lo usas)
    # - name: Setup Snyk
    #   uses: snyk/actions/setup@master

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }} && dotnet restore ${{ env.TEST_PROJECT_PATH }}

    - name: Run Unit Tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-restore --logger trx

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

    - name: Determine Package Version (using Matrícula)
      id: package_info
      run: |
        if [ -n "${{ github.event.inputs.matricula_version }}" ]; then
          VERSION="${{ github.event.inputs.matricula_version }}"
        elif [ -n "${{ secrets.GH_TOKEN }}" ]; then
          VERSION="${{ secrets.GH_TOKEN }}"
        else
          echo "Error: Se requiere GH_TOKEN como secreto o matricula_version como input del workflow."
          exit 1
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Package version set to: $VERSION"

    - name: Create NuGet Package
      run: |
        echo "Packaging ${{ env.PROJECT_NAME }} with version: ${{ env.PACKAGE_VERSION }}"
        dotnet pack ${{ env.PROJECT_PATH }} \
          -c Release \
          --no-build \
          /p:PackageVersion=${{ env.PACKAGE_VERSION }} \
          -o ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Setup NuGet Source for GitHub Packages
      run: |
        dotnet nuget add source --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text \
          --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    - name: Publish NuGet Package to GitHub Packages
      run: |
        # El nombre del archivo nupkg se forma como <PackageId>.<Version>.nupkg
        # Por eso es importante que env.PROJECT_NAME coincida con <PackageId>
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/${{ env.PROJECT_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source "github" \
          --skip-duplicate

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.package_info.outputs.version_tag }}
        name: "Release ${{ steps.package_info.outputs.version_tag }} (${{ env.PROJECT_NAME }})"
        body: |
          Release del paquete ${{ env.PROJECT_NAME }} versión ${{ env.PACKAGE_VERSION }}.
          Contiene el archivo NuGet generado.
        artifacts: "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/${{ env.PROJECT_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true