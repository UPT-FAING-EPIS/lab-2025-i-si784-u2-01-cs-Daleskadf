name: Publish Coverage Report

on:
  push:
    branches:
      - main  # Este flujo de trabajo se ejecutará en cada push a la rama principal

jobs:
  build:
    runs-on: ubuntu-latest  # Puedes usar 'windows-latest' si prefieres Windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'  # Asegúrate de que esté usando la versión correcta de .NET

      # Compilar el proyecto
      - name: Restore dependencies
        run: dotnet restore ./MyMath/MyMath.sln  # Especificamos la ruta correcta al archivo .sln

      - name: Build the project
        run: dotnet build ./MyMath/MyMath.sln --configuration Release  # Especificamos la ruta al archivo .sln

      # Ejecutar las pruebas y generar el reporte de cobertura
      - name: Run tests and collect code coverage
        run: dotnet test ./MyMath/MyMath.sln --configuration Release --collect:"XPlat Code Coverage"  # Especificamos la ruta al archivo .sln

      # Instalar la herramienta de generación de reportes
      - name: Install report generator
        run: |
          dotnet new tool-manifest # Crea un archivo de manifest de herramientas si no existe
          dotnet tool install dotnet-reportgenerator-globaltool
          
      # Generar el reporte de cobertura
      - name: Generate coverage report
        run: |
          ReportGenerator "-reports:./*/*/*/coverage.cobertura.xml" "-targetdir:Cobertura" -reporttypes:HTML

      # Publicar el reporte de cobertura en GitHub Pages
      - name: Publish coverage report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage_report
          destination_dir: coverage  # Esto definirá la carpeta 'coverage' en GitHub Pages
